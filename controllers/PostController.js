const Post = require('../models/Post');const User = require('../models/User');const Like = require('../models/Like');const Comment = require('../models/Comment');exports.createPost = async (req, res) => {    try {        const {content, image, video} = req.body;        const authorId = req.userData.userId;        const post = new Post({            content, image, video, author: authorId        });        await post.save();        const user = await User.findById(authorId);        user.posts.push(post._id);        await user.save();        return res.status(200).json({message: "Post created successfully"})    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to create post"})    }}exports.addLike = async (req, res) => {    try {        const postId = req.params.postId;        const userId = req.userData.userId;        const existingLike = await Like.findOne({user: userId, post: postId});        if (existingLike) {            return res.status(400).json({message: "User has already liked this post"});        }        const like = new Like({user: userId, post: postId});        await like.save();        const post = await Post.findById(postId);        post.likes.push(like._id);        await post.save();        return res.status(200).json({message: "Like added successfully"});    } catch (err) {        console.error(err);        return res.status(400).json({error: "Failed to add like"});    }};exports.addComment = async (req, res) => {    try {        const postId = req.params.postId;        const userId = req.userData.userId;        const {content} = req.body;        if (!content) {            return res.status(400).json({error: "Comment content is required"});        }        const comment = new Comment({content, user: userId, post: postId});        await comment.save();        const post = await Post.findById(postId);        post.comments.push(comment._id);        await post.save();        return res.status(200).json({message: "Comment added successfully"})    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to add comment"})    }}exports.getUserPosts = async (req, res) => {    try {        const userId = req.params.userId;        const user = await User.findById(userId).populate('posts');        return res.status(200).json({posts: user.posts});    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to get user posts"})    }}exports.updatePost = async (req, res) => {    try {        const postId = req.params.postId;        const userId = req.userData.userId;        const {content, image, video} = req.body;        const post = await Post.findOne({_id: postId, author: userId});        if (!post) {            return res.status(400).json({error: "Post not found or user not authorized"});        }        post.content = content || post.content;        post.image = image || post.image;        post.video = video || post.video;        await post.save();        return res.status(200).json({message: "Post updated successfully", post});    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to update post"})    }}exports.deletePost = async (req, res) => {    try {        const postId = req.params.postId;        const userId = req.userData.userId;        const post = await Post.findOne({_id: postId, author: userId});        if (!post) {            return res.status(400).json({error: "Post not found or user not authorized"});        }        await post.remove();        return res.status(200).json({message: "Post deleted successfully"});    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to delete post"})    }}