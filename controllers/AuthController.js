const express = require("express")const User = require("../models/User");const bcrypt = require("bcryptjs");const jwt = require("jsonwebtoken");const dotenv = require("dotenv")dotenv.config()const moment = require("moment")const fs = require("fs");const path = require("path");const nodemailer = require("nodemailer");const year = new Date().getFullYear();async function sendWelcomeEmail(user) {    const transporter = nodemailer.createTransport({        service: "gmail", auth: {            user: process.env.EMAIL, pass: process.env.PASSWORD,        },    });    const emailTemplate = fs.readFileSync(path.join(__dirname, "../emails/welcome.html"), "utf-8");    const emailHtml = emailTemplate.replace(/{firstName}/g, user.firstName).replace(/{year}/g, year);    const mailOptions = {        from: "Open Government", to: user.email, subject: "Welcome to Open Government", html: emailHtml,    };    await transporter.sendMail(mailOptions, function (error) {        if (error) {            console.log(error);        } else {            console.log("Welcome email sent to " + user.firstName);        }    });}exports.registerUser = async (req, res) => {    try {        const {email, password, dateOfBirth, firstName, lastName, user_role} = req.body;        const checkExistingUser = await User.findOne({email})        if (checkExistingUser) {            return res.status(400).json({message: "User already exists"})        }        const hashedPassword = await bcrypt.hash(password, 10)        const formattedDateOfBirth = moment(dateOfBirth, "DD-MM-YYYY").format("YYYY-MM-DD")        const verificationToken = Math.floor(100000 + Math.random() * 900000)        req.session.verificationToken = verificationToken;        const user = new User({            email,            password: hashedPassword,            dateOfBirth: formattedDateOfBirth,            firstName,            lastName,            user_role: user_role || "user",            user_verified: false,        })        await user.save()        req.session.userId = user._id;        const transporter = nodemailer.createTransport({            service: "gmail", auth: {                user: process.env.EMAIL, pass: process.env.PASSWORD,            },        });        const emailTemplate = fs.readFileSync(path.join(__dirname, "../emails/otp.html"), "utf-8");        const emailHtml = emailTemplate.replace(/{firstName}/g, user.firstName).replace(/{verificationToken}/g, verificationToken).replace(/{year}/g, year);        const mailOptions = {            from: "Open Government", to: email, subject: "Verification", html: emailHtml,        };        await transporter.sendMail(mailOptions, function (error) {            if (error) {                console.log(error);                return res.status(400).json({error: "Failed to send token"});            } else {                console.log("Email sent: to " + user.firstName);            }        });        return res.status(200).json({message: "User registered successfully"})    } catch        (err) {        console.error(err)        return res.status(400).json({error: "Failed to register user"})    }}exports.verifyUser = async (req, res) => {    try {        const {token} = req.body;        const userId = req.session.userId;        const user = await User.findById(userId);        if (!user) {            return res.status(400).json({error: "User not found"})        }        if (token !== req.session.verificationToken) {            return res.status(400).json({error: "Invalid token"})        }        user.user_verified = true;        await user.save();        await sendWelcomeEmail(user);        return res.status(200).json({message: "User verified successfully"})    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to verify user"})    }}exports.resendVerificationToken = async (req, res) => {    try {        const userId = req.session.userId;        const user = await User.findById(userId);        if (!user) {            return res.status(400).json({error: "User not found"})        }        const verificationToken = Math.floor(100000 + Math.random() * 900000);        req.session.verificationToken = verificationToken;        const transporter = nodemailer.createTransport({            service: "gmail", auth: {                user: process.env.EMAIL, pass: process.env.PASSWORD,            },        });        const emailTemplate = fs.readFileSync(path.join(__dirname, "../emails/otp.html"), "utf-8");        const emailHtml = emailTemplate.replace(/{firstName}/g, user.firstName).replace(/{verificationToken}/g, verificationToken).replace(/{year}/g, year);        const mailOptions = {            from: "Open Government", to: user.email, subject: "Verification", html: emailHtml,        };        await transporter.sendMail(mailOptions, function (error) {            if (error) {                console.log(error);                return res.status(400).json({error: "Failed to send token"});            } else {                console.log("Email sent: to " + user.firstName);            }        });        return res.status(200).json({message: "Verification token resent successfully"})    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to resend verification token"})    }}exports.loginUser = async (req, res) => {    try {        const {email, password} = req.body;        const user = await User.findOne({email})        if (!user) {            return res.status(400).json({error: "Cannot find user"})        }        const isPasswordValid = await bcrypt.compare(password, user.password)        if (!isPasswordValid) {            return res.status(400).json({error: "Invalid password"})        }        if (user.user_verified === false) {            return res.status(400).json({error: "User not verified"});        }        const token = jwt.sign({userId: user._id}, process.env.SECRET_KEY, {            expiresIn: "30m",        });        return res.status(200).json({message: "User logged in successfully", token})    } catch (err) {        console.error(err)        return res.status(400).json({error: "Failed to login user"})    }}